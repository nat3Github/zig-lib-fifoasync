/// Autogenerated, will refresh if underlying struct changes and build.zig if setup in the build script
/// changes to this file will likely be overwritten

const std = @import("std");

const src = @import("example.zig");

pub fn NewStruct(comptime Server: type) type {
if (!(@hasDecl(Server, "send"))) {
@compileError("the server type is missing the send method");
}
return struct {
    channel: Server,
pub fn message_handler(remote: *src.example.MyStruct, msg: NewStructAsmParamUnion) NewStructAsmReturnUnion {
switch (msg) {
NewStructAsmTag.nothing =>  {
    return NewStructAsmReturnUnion{.nothing = src.example.MyStruct.nothing() };
},
NewStructAsmTag.something => |v| {
    return NewStructAsmReturnUnion{.something = src.example.MyStruct.something(v[0], v[1]) };
},
NewStructAsmTag.selfFunction => |v| {
    return NewStructAsmReturnUnion{.selfFunction = src.example.MyStruct.selfFunction(remote, v[0], v[1]) };
},
NewStructAsmTag.kkkk => |v| {
    return NewStructAsmReturnUnion{.kkkk = src.example.MyStruct.kkkk(remote, v[0], v[1]) };
}
}
}
// delegated functions:
pub fn nothing(self: *@This()) void {
const msg = NewStructAsmParamUnion{
.nothing = .{} 
};
self.channel.send(msg);
}
pub fn something(self: *@This(), x0: i32, x1: f32) void {
const msg = NewStructAsmParamUnion{
.something = .{x0, x1} 
};
self.channel.send(msg);
}
pub fn selfFunction(self: *@This(), x0: *src.example.MyStruct) void {
const msg = NewStructAsmParamUnion{
.selfFunction = .{x0} 
};
self.channel.send(msg);
}
pub fn kkkk(self: *@This(), x0: *src.example.MyStruct) void {
const msg = NewStructAsmParamUnion{
.kkkk = .{x0} 
};
self.channel.send(msg);
}
};
}

pub const NewStructAsmTag = enum {
nothing,
something,
selfFunction,
kkkk
};

pub const NewStructAsmParamUnion = union(NewStructAsmTag) {
nothing: std.meta.tuple(&.{}),
something: std.meta.tuple(&.{i32, f32}),
selfFunction: std.meta.tuple(&.{*src.example.MyStruct}),
kkkk: std.meta.tuple(&.{*src.example.MyStruct})
};

pub const NewStructAsmReturnUnion = union(NewStructAsmTag) {
nothing: f32,
something: void,
selfFunction: void,
kkkk: void
};