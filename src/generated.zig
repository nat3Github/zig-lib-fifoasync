/// Autogenerated, will refresh if underlying struct changes and build.zig if setup in the build script
/// changes to this file will likely be overwritten
const std = @import("std");

const src = @import("example.zig");

pub fn NewStruct(comptime Channel: type) type {
    if (!(@hasDecl(Channel, "send"))) {
        @compileError("the server type is missing the send method");
    }
    return struct {
        channel: Channel,
        pub const NewStructDecls = enum { nothing, something, selfFunction, kkkk };
        pub const Args = union(NewStructDecls) { nothing: std.meta.tuple(&.{}), something: std.meta.tuple(&.{ i32, f32 }), selfFunction: std.meta.tuple(&.{*src.example.MyStruct}), kkkk: std.meta.tuple(&.{*src.example.MyStruct}) };
        pub const Ret = union(NewStructDecls) { nothing: f32, something: void, selfFunction: void, kkkk: void };
        pub fn message_handler(remote: *src.example.MyStruct, msg: Args) Ret {
            switch (msg) {
                NewStructDecls.nothing => {
                    return Ret{ .nothing = src.example.MyStruct.nothing() };
                },
                NewStructDecls.something => |v| {
                    return Ret{ .something = src.example.MyStruct.something(v[0], v[1]) };
                },
                NewStructDecls.selfFunction => |v| {
                    return Ret{ .selfFunction = src.example.MyStruct.selfFunction(remote, v[0], v[1]) };
                },
                NewStructDecls.kkkk => |v| {
                    return Ret{ .kkkk = src.example.MyStruct.kkkk(remote, v[0], v[1]) };
                },
            }
        }
        // delegated functions:
        pub fn nothing(self: *@This()) !void {
            const msg = Args{ .nothing = .{} };
            try self.channel.send(msg);
        }
        pub fn something(self: *@This(), x0: i32, x1: f32) !void {
            const msg = Args{ .something = .{ x0, x1 } };
            try self.channel.send(msg);
        }
        pub fn selfFunction(self: *@This(), x0: *src.example.MyStruct) !void {
            const msg = Args{ .selfFunction = .{x0} };
            try self.channel.send(msg);
        }
        pub fn kkkk(self: *@This(), x0: *src.example.MyStruct) !void {
            const msg = Args{ .kkkk = .{x0} };
            try self.channel.send(msg);
        }
    };
}
